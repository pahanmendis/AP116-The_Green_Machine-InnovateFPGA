
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10NanoUART_FPGA(

    //////////// CLOCK //////////
    input               FPGA_CLK1_50,
    input               FPGA_CLK2_50,
    input               FPGA_CLK3_50,

    //////////// HDMI //////////
    inout               HDMI_I2C_SCL,
    inout               HDMI_I2C_SDA,
    inout               HDMI_I2S,
    inout               HDMI_LRCLK,
    inout               HDMI_MCLK,
    inout               HDMI_SCLK,
    output              HDMI_TX_CLK,
    output   [23: 0]    HDMI_TX_D,
    output              HDMI_TX_DE,
    output              HDMI_TX_HS,
    input               HDMI_TX_INT,
    output              HDMI_TX_VS,

    //////////// HPS //////////
    inout               HPS_CONV_USB_N,
    output   [14: 0]    HPS_DDR3_ADDR,
    output   [ 2: 0]    HPS_DDR3_BA,
    output              HPS_DDR3_CAS_N,
    output              HPS_DDR3_CK_N,
    output              HPS_DDR3_CK_P,
    output              HPS_DDR3_CKE,
    output              HPS_DDR3_CS_N,
    output   [ 3: 0]    HPS_DDR3_DM,
    inout    [31: 0]    HPS_DDR3_DQ,
    inout    [ 3: 0]    HPS_DDR3_DQS_N,
    inout    [ 3: 0]    HPS_DDR3_DQS_P,
    output              HPS_DDR3_ODT,
    output              HPS_DDR3_RAS_N,
    output              HPS_DDR3_RESET_N,
    input               HPS_DDR3_RZQ,
    output              HPS_DDR3_WE_N,
    output              HPS_ENET_GTX_CLK,
    inout               HPS_ENET_INT_N,
    output              HPS_ENET_MDC,
    inout               HPS_ENET_MDIO,
    input               HPS_ENET_RX_CLK,
    input    [ 3: 0]    HPS_ENET_RX_DATA,
    input               HPS_ENET_RX_DV,
    output   [ 3: 0]    HPS_ENET_TX_DATA,
    output              HPS_ENET_TX_EN,
    inout               HPS_GSENSOR_INT,
    inout               HPS_I2C0_SCLK,
    inout               HPS_I2C0_SDAT,
    inout               HPS_I2C1_SCLK,
    inout               HPS_I2C1_SDAT,
    inout               HPS_KEY,
    inout               HPS_LED,
    inout               HPS_LTC_GPIO,
    output              HPS_SD_CLK,
    inout               HPS_SD_CMD,
    inout    [ 3: 0]    HPS_SD_DATA,
    output              HPS_SPIM_CLK,
    input               HPS_SPIM_MISO,
    output              HPS_SPIM_MOSI,
    inout               HPS_SPIM_SS,
    input               HPS_UART_RX,
    output             	HPS_UART_TX,
    input               HPS_USB_CLKOUT,
    inout    [ 7: 0]    HPS_USB_DATA,
    input               HPS_USB_DIR,
    input               HPS_USB_NXT,
    output              HPS_USB_STP,
	 
	 //////////// RFS //////////
	 inout 					RFSBT_KEY,
	 input 					RFSBT_UART_RX,
	 output 					RFSBT_UART_TX,
	 

    //////////// KEY //////////
    input    [ 1: 0]    KEY,

    //////////// LED //////////
    output   [ 7: 0]    LED,

    //////////// SW //////////
    input    [ 3: 0]    SW
);

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire uart0_rx;
wire uart0_tx;

assign uart0_tx = 1'b1;

//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
               // Clock & Reset
               .clk_clk(FPGA_CLK1_50),
					.reset_reset_n(KEY[0]),
               // HPS ddr3
					.mode_sel_export                   (KEY[1]),                   //      mode_sel.export
					.bt_key_export                     (RFSBT_KEY),                     //        bt_key.export
					.uart_external_rxd                 (RFSBT_UART_RX),                 // uart_external.rxd
					.uart_external_txd                 (RFSBT_UART_TX),                  //              .txd
               .memory_mem_a(HPS_DDR3_ADDR),
               .memory_mem_ba(HPS_DDR3_BA),
               .memory_mem_ck(HPS_DDR3_CK_P),
               .memory_mem_ck_n(HPS_DDR3_CK_N),
               .memory_mem_cke(HPS_DDR3_CKE),
               .memory_mem_cs_n(HPS_DDR3_CS_N),
               .memory_mem_ras_n(HPS_DDR3_RAS_N),
               .memory_mem_cas_n(HPS_DDR3_CAS_N),
               .memory_mem_we_n(HPS_DDR3_WE_N),
               .memory_mem_reset_n(HPS_DDR3_RESET_N),
               .memory_mem_dq(HPS_DDR3_DQ),
               .memory_mem_dqs(HPS_DDR3_DQS_P),
               .memory_mem_dqs_n(HPS_DDR3_DQS_N),
               .memory_mem_odt(HPS_DDR3_ODT),
               .memory_mem_dm(HPS_DDR3_DM),
               .memory_oct_rzqin(HPS_DDR3_RZQ),
					// HPS SD card
					.hps_0_hps_io_hps_io_sdio_inst_CMD(HPS_SD_CMD),
					.hps_0_hps_io_hps_io_sdio_inst_D0(HPS_SD_DATA[0]),
					.hps_0_hps_io_hps_io_sdio_inst_D1(HPS_SD_DATA[1]),
					.hps_0_hps_io_hps_io_sdio_inst_CLK(HPS_SD_CLK),
					.hps_0_hps_io_hps_io_sdio_inst_D2(HPS_SD_DATA[2]),
					.hps_0_hps_io_hps_io_sdio_inst_D3(HPS_SD_DATA[3]),
					// HPS UART
					.hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),
					.hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),
//               // HPS UART
//               .hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),             //                               .hps_io_uart0_inst_RX
//               .hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),             //                               .hps_io_uart0_inst_TX
//					// FPGA UART
//					.hps_0_uart1_cts(),                      //  hps_0_uart1.cts
//					.hps_0_uart1_dsr(),                      //             .dsr
//					.hps_0_uart1_dcd(),                      //             .dcd
//					.hps_0_uart1_ri(),                       //             .ri
//					.hps_0_uart1_dtr(),                      //             .dtr
//					.hps_0_uart1_rts(),                      //             .rts
//					.hps_0_uart1_out1_n(),                   //             .out1_n
//					.hps_0_uart1_out2_n(),                   //             .out2_n
//					.hps_0_uart1_rxd(uart0_rx),              //             .rxd
//					.hps_0_uart1_txd(uart0_tx)               //             .txd

//					.hps_0_hps_io_hps_io_gpio_inst_GPIO49(uart_rx),
//					.hps_0_hps_io_hps_io_gpio_inst_GPIO50(uart_tx)

//					.hps_0_hps_io_hps_io_gpio_inst_LOANIO49(HPS_UART_RX),
//					.hps_0_hps_io_hps_io_gpio_inst_LOANIO50(HPS_UART_TX),
//					.hps_0_h2f_loan_io_in({{15{1'b0}}, 1'b0, uart_rx, {49{1'b0}}}),
//					.hps_0_h2f_loan_io_out({{15{1'b0}}, uart_tx, 1'b0, {49{1'b0}}}),
//					.hps_0_h2f_loan_io_oe({{15{1'b0}}, 2'b10, {49{1'b0}}}),
					
					.leds_export(LED[7:4])
           );
			  
			  


			  
//assign LED[0] = HPS_UART_RX;
//assign LED[0] = 1'b1;
assign LED[1] = uart0_rx;
//assign LED[2] = ~HPS_UART_RX;
//assign LED[2] = 1'b0;
assign LED[3] = ~uart0_rx;

endmodule
